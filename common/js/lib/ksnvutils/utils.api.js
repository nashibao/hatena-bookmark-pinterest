// Generated by CoffeeScript 1.3.1
var utils,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

if (this.utils == null) {
  this.utils = {};
}

utils = this.utils;

utils.api = (function() {
  /*
  	network関係のutil
  	get, post
  */

  function api() {}

  api.parseParams = function(dic) {
    var key, str, val;
    str = '?';
    for (key in dic) {
      val = dic[key];
      if (ko.isObservable(val)) {
        str += key + '=' + val() + '&';
      } else if (utils.type(val) === 'array') {
        str += key + '=[' + val + ']&';
      } else {
        str += key + '=' + val + '&';
      }
    }
    return str;
  };

  api.getJSON = function(url, data, callback) {
    utils.log(url);
    $.ajaxSetup({
      cache: false
    });
    return $.getJSON(url, data, function(data) {
      $.ajaxSetup({
        cache: true
      });
      utils.log(data);
      return callback(data);
    });
  };

  api.postJSON = function(url, data, callback) {
    utils.log(url);
    $.ajaxSetup({
      cache: false
    });
    return $.ajax({
      url: url,
      type: "POST",
      data: data,
      dataType: "json",
      complete: function(data, dataType) {
        utils.log(data);
        $.ajaxSetup({
          cache: true
        });
        return callback(data);
      }
    });
  };

  api.get = function(url, params, callback) {
    return this.getJSON(url, function(data) {
      var da, filter, identifier, jsn, key, kls, modelname, obj, objs, objss, options, target, tempnames, val, _i, _j, _k, _len, _len1, _len2;
      tempnames = [];
      objss = {};
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        val = params[_i];
        key = val.key, kls = val["class"], target = val.target, filter = val.filter, identifier = val.identifier, options = val.options;
        objs = [];
        objss[key] = objs;
        tempnames.push(key);
        if (identifier == null) {
          identifier = [];
        }
        da = data[key];
        if (options && 'reverse' in options) {
          da = da.reverse();
        }
        for (_j = 0, _len1 = da.length; _j < _len1; _j++) {
          jsn = da[_j];
          obj = jsn;
          if (kls) {
            obj = utils.model.map(jsn, kls, identifier);
            if (!filter || filter(obj)) {
              if (target) {
                target.push(obj);
              }
            }
          } else {
            if (!filter || filter(obj)) {
              if (target) {
                target.push(obj);
              }
            }
          }
          objs.push(obj);
        }
        kls._dispatchall();
      }
      for (modelname in utils.model.models) {
        if (__indexOf.call(tempnames, modelname) < 0) {
          kls = utils.model.models[modelname];
          da = data[modelname];
          if (da) {
            for (_k = 0, _len2 = da.length; _k < _len2; _k++) {
              jsn = da[_k];
              utils.log(jsn);
              obj = utils.model.map(jsn, kls, []);
              objs.push(obj);
            }
            kls._dispatchall();
          }
        }
      }
      callback(data, objss);
      return utils.log(data);
    });
  };

  api.post = function(url, query, params, callback, progress) {
    return this.postJSON(url, query, function(d) {
      var data, identifier, jsn, key, kls, obj, objs, objss, options, val, _i, _len;
      data = $.evalJSON(d.responseText);
      utils.log(data);
      objss = {};
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        val = params[_i];
        objs = [];
        key = val.key, kls = val["class"], identifier = val.identifier, options = val.options;
        objss[key] = objs;
        if (identifier == null) {
          identifier = [];
        }
        jsn = data[key];
        if (kls) {
          obj = utils.model.map(jsn, kls, identifier);
          objs.push(obj);
        }
        kls._dispatchall();
      }
      callback(data, objss);
      return utils.log(data);
    });
  };

  return api;

})();
