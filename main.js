// Generated by CoffeeScript 1.3.1
var Hatena, ViewModel, app, tile_top, tile_width, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  _this = this;

if (this.app == null) {
  this.app = {};
}

app = this.app;

utils = this.utils;

utils.debug = true;

ViewModel = (function() {

  function ViewModel() {}

  return ViewModel;

})();

app.vm = new ViewModel();

app.vm.ui = utils.ui;

if (app.model == null) {
  app.model = {};
}

tile_width = 320;

tile_top = 100;

app.model.Entry = (function(_super) {

  __extends(Entry, _super);

  function Entry(options) {
    var domain, id, image, link, num, subtitle, timestamp, title;
    title = options.title, subtitle = options.subtitle, image = options.image, link = options.link, num = options.num, timestamp = options.timestamp, domain = options.domain, id = options.id;
    this.title = ko.observable(title);
    this.subtitle = ko.observable(subtitle);
    this.image = ko.observable(image);
    this.link = ko.observable(link);
    this.num = ko.observable(num);
    this.timestamp = ko.observable(timestamp);
    this.domain = ko.observable(domain);
    this.id = ko.observable(id);
  }

  return Entry;

})(utils.model.Model);

app.model.Interest = (function(_super) {

  __extends(Interest, _super);

  function Interest(title, id) {
    this.selected = __bind(this.selected, this);

    this.resizeall = __bind(this.resizeall, this);

    this.load = __bind(this.load, this);

    this.more = __bind(this.more, this);
    this.title = ko.observable(title);
    this.id = ko.observable(id);
    this.page = 0;
    this.entries = ko.observableArray([]);
    this.columns = [];
  }

  Interest.prototype.more = function() {
    this.page = this.entries().length;
    return this.load();
  };

  Interest.prototype.load = function() {
    var _this = this;
    utils.log(this.page);
    return $.get("http://b.hatena.ne.jp/nashibao/interest/" + this.title() + "?of=" + this.page + "&fragment=main", function(data) {
      var d_entry, d_link, dom, entry, id, image, link, num, subtitle, title, _i, _len, _ref;
      dom = $(data);
      _ref = $(".main-entry-list > li", dom);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d_entry = _ref[_i];
        d_link = $(".entry-title > .entry-link", d_entry);
        id = $(".entry-comment", d_entry).attr('id');
        utils.log(id);
        title = d_link.text();
        link = d_link.attr('href');
        subtitle = $("p.entry-summary", d_entry).text().replace(' 続きを読む', '');
        image = $(".entry-image-block > .capture > img", d_entry).attr('src');
        num = $("a", $(".users", d_entry)).text().replace(' users', '');
        entry = new app.model.Entry({
          title: title,
          subtitle: subtitle,
          image: image,
          link: link,
          num: num,
          id: id
        });
        _this.entries.push(entry);
      }
      return _this.resizeall();
    });
  };

  Interest.prototype.resizeall = function() {
    var col_index, colnum, column, dom, entry, i, imgdom, parent, parent_left, parent_top, parent_width, yohaku, _i, _j, _k, _len, _ref, _ref1, _ref2, _results;
    parent = $("#interest-dom");
    parent_width = parent.width();
    parent_left = parent.offset().left;
    parent_top = parent.offset().top;
    colnum = Math.floor(parent_width / tile_width);
    yohaku = (parent_width - (colnum * tile_width)) / 2;
    this.columns = [];
    for (i = _i = 0, _ref = colnum - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.columns.push({
        height: tile_top,
        rows: []
      });
    }
    col_index = 0;
    _ref1 = this.entries();
    for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
      entry = _ref1[_j];
      dom = $("#" + entry.id() + '-dom');
      imgdom = $("img", dom);
      column = this.columns[col_index];
      column.rows.push(dom);
      dom.offset({
        top: parent_top + column.height,
        left: yohaku + parent_left + tile_width * col_index
      });
      column.height += dom.height();
      if (imgdom.height() === 0) {
        column.height += 195;
      }
      col_index += 1;
      if (col_index === colnum) {
        col_index = 0;
      }
    }
    _results = [];
    for (i = _k = 0, _ref2 = colnum - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
      if ($('#morebtn').offset().top < this.columns[i].height) {
        _results.push($('#morebtn').offset({
          top: this.columns[i].height + 60
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Interest.prototype.selected = function() {
    app.vm.hatena.selectedInterest(this);
    if (this.entries().length > 0) {
      return this.resizeall();
    } else {
      return this.load();
    }
  };

  return Interest;

})(utils.model.Model);

Hatena = (function() {

  function Hatena() {
    this.resized = __bind(this.resized, this);

    this.load = __bind(this.load, this);
    this.interests = ko.observableArray([]);
    this.selectedInterest = ko.observable(false);
  }

  Hatena.prototype.load = function() {
    var _this = this;
    return $.get("http://b.hatena.ne.jp/nashibao/interest?fragment=interest_top_entries", function(data) {
      var d_interest, dom, title, _i, _len, _ref, _results;
      dom = $(data);
      _ref = $(".interest-sub-unit", dom);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d_interest = _ref[_i];
        title = $(".content-title", d_interest).text();
        _results.push(_this.interests.push(new app.model.Interest(title, title)));
      }
      return _results;
    });
  };

  Hatena.prototype.resized = function() {
    var colnum;
    if (app.vm.hatena.selectedInterest() && app.vm.hatena.selectedInterest().entries() && app.vm.hatena.selectedInterest().entries().length > 0) {
      if (app.vm.hatena.selectedInterest().columns.length === 0) {
        return app.vm.hatena.selectedInterest().resizeall();
      } else {
        colnum = Math.floor($("#interest-dom").width() / tile_width);
        if (colnum !== app.vm.hatena.selectedInterest().columns.length) {
          return app.vm.hatena.selectedInterest().resizeall();
        }
      }
    }
  };

  return Hatena;

})();

app.vm.hatena = new Hatena();

$(window).resize(function() {
  return app.vm.hatena.resized();
});

$(window).scroll(function() {
  return app.vm.hatena.resized();
});

$(document).ready(function() {
  ko.applyBindings(app.vm);
  return app.vm.hatena.load();
});
